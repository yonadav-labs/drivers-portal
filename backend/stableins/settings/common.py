"""
Django settings for settings project.

Generated by 'django-admin startproject' using Django 2.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""
import logging
logger = logging.getLogger(__name__)

import environ
import os
import socket
from celery.schedules import crontab

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(PROJECT_DIR)

# Set default values and casting
env = environ.Env()
# Read .env file
environ.Env.read_env(os.path.join(BASE_DIR, '../.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

SECRET_KEY = env('DJANGO_SECRET_KEY')
NYC_OPEN_DATA_SECRET_TOKEN = env('NYC_OPEN_DATA_SECRET_TOKEN')
NYC_OPEN_DATA_API_TOKEN = env('NYC_OPEN_DATA_API_TOKEN')
NYC_OPEN_DATA_API_USER = env('NYC_OPEN_DATA_API_USER')
NYC_OPEN_DATA_API_PASSWORD = env('NYC_OPEN_DATA_API_PASSWORD')
SENDGRID_API_KEY = env('SENDGRID_API_KEY')

DEBUG = True


# Get docker gateway IP
_base_internal_ips = ['127.0.0.1', '10.0.2.2', ]
try:
    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
except Exception as e:
    logger.error("Error getting internal ips: {}".format(e.__str__()))
    INTERNAL_IPS = _base_internal_ips
else:
    INTERNAL_IPS = [ip[:-1] + '1' for ip in ips] + _base_internal_ips

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django_object_actions',
    'admin_tools',
    'admin_tools.theming',
    'admin_tools.menu',
    'admin_tools.dashboard',
    'nested_admin',
    'corsheaders',
    'base.apps.BaseConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.postgres',
    'django.contrib.sites',
    'rest_framework',
    'rest_framework.authtoken',
    'anymail',
    # Local apps
    'users.apps.UsersConfig',
    'importer.apps.ImporterConfig',
    'quote.apps.QuoteConfig',
    'payment.apps.PaymentConfig',
    'policy.apps.PolicyConfig',
    'hellosign_app.apps.HellosignAppConfig',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'stableins.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'base.context_processors.stage_environ'
            ],
            'loaders': [
                'admin_tools.template_loaders.Loader',
                'django.template.loaders.app_directories.Loader',
            ]
        },
    },
]

WSGI_APPLICATION = 'stableins.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': env('DATABASE_NAME'),
        'USER': env('DATABASE_USER'),
        'PASSWORD': env('DATABASE_PASS'),
        'HOST': env('DATABASE_HOST'),
    }
}


AUTH_USER_MODEL = 'users.User'

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static_root')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media_root')

FILE_UPLOAD_PERMISSIONS = 0o644

# Celery
# https://www.revsys.com/tidbits/celery-and-django-and-docker-oh-my/

CELERY_BROKER_URL = 'redis://redis:6379'
CELERY_RESULT_BACKEND = 'redis://redis:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_BEAT_SCHEDULE = {
    # Executes every day midnigth - 00:00
    # 'MedallionImportTask': {
    #     'task': 'importer.tasks.medallion_import_task',
    #     'schedule': crontab(minute=0, hour=0)
    # },
    # Executes every day midnigth - 00:15
    'DeleteExpiredMagicLinks': {
        'task': 'users.tasks.delete_expired_links',
        'schedule': crontab(minute=15, hour=0)
    },
    # Executes every day midnigth + 1 - 01:00
    'ForHireImportTask': {
        'task': 'importer.tasks.for_hire_import_task',
        'schedule': crontab(minute=0, hour=1)
    },
    # Executes every day midnigth + 2 - 02:00
    'VehicleInsuranceImportTask': {
        'task': 'importer.tasks.vehicle_insurance_import_task',
        'schedule': crontab(minute=0, hour=2)
    },
    # Executes every day midnigth + 3 - 02:00
    'FHVActiveDriverImportTask': {
        'task': 'importer.tasks.fhv_active_driver_import_task',
        'schedule': crontab(minute=0, hour=3)
    }
}


# Email
# Anymail - SendGrid
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = 'stableins <noreply@stableins.com>'
ADMIN_EMAIL = "dani@z1.digital"
ANYMAIL = {
    "SENDGRID_API_KEY": "{}".format(SENDGRID_API_KEY),
}

# Set the pdf generation system on debug mode
# - watermarking
# - Use fake data
PDF_DEBUG = True

# Admin environ
STAGE_ENV_SETTINGS = {
    'development': {"name": "Development", "color": '#4fc14f'},
    'staging': {"name": "Staging", "color": '#ffa500'},
    'production': {"name": "Production", "color": '#ff0000'},
}

# Sites
SITE_ID = 1

# Stripe
STRIPE_LIVE_PUBLIC_KEY = env("STRIPE_LIVE_PUBLIC_KEY")
STRIPE_LIVE_SECRET_KEY = env("STRIPE_LIVE_SECRET_KEY")
STRIPE_TEST_PUBLIC_KEY = env("STRIPE_TEST_PUBLIC_KEY")
STRIPE_TEST_SECRET_KEY = env("STRIPE_TEST_SECRET_KEY")
STRIPE_LIVE_MODE = False

# Plaid
PLAID_ENV = "sandbox"
PLAID_CLIENT_ID = env("PLAID_CLIENT_ID")
PLAID_CLIENT_PUBLIC_KEY = env("PLAID_CLIENT_PUBLIC_KEY")
PLAID_CLIENT_SECRET_KEY = env("PLAID_CLIENT_SANDBOX_SECRET_KEY")

# Rest framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    )
}

# HelloSign
HELLOSIGN_ENABLED = False
HELLOSIGN_APIKEY = env("HELLOSIGN_APIKEY")
HELLOSIGN_TESTMODE = True
HELLOSIGN_SKIPDOMAIN = True
HELLOSIGN_TERMS_TEMPLATE_ID = env("HELLOSIGN_TERMS_TEMPLATE_ID")


# Admin
ADMIN_TOOLS_INDEX_DASHBOARD = {
    'base.admin.stable_admin': 'admin_dashboard.dashboard.CustomIndexDashboard',
    'django.contrib.admin.site': 'admin_dashboard.django_admin_dashboard.CustomIndexDashboard',
}
ADMIN_TOOLS_APP_INDEX_DASHBOARD = {
    'base.admin.stable_admin': 'admin_dashboard.dashboard.CustomAppIndexDashboard',
    'django.contrib.admin.site': 'admin_dashboard.django_admin_dashboard.CustomAppIndexDashboard',
}

FRONTEND_URL = "localhost:8080"
